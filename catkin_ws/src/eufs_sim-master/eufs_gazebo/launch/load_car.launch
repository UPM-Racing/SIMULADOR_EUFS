<?xml version="1.0"?>
<launch>

  <!-- Namespace of the gazebo robot  -->
  <arg name="namespace" default="eufs"/>

  <!-- The launch group (default or no_perception) -->
  <arg name="launch_group" default="default"/>

  <!-- Show the RQT GUI (with ros_can_sim GUI and EUFS Robot Steering GUI) -->
  <arg name="show_rqt_gui" default="true"/>
  <!-- Launch RViz -->
  <arg name="rviz" default="false"/>

  <!-- The vehicle model class to use in the gazebo_ros_race_car_model -->
  <arg name="vehicleModel" default="DynamicBicycle"/>
  <!-- If the gazebo_ros_race_car_model should publish the ground truth tf -->
  <arg name="publish_gt_tf" default="false"/>

  <!-- Vehicle pose -->
  <arg name="x" default="0"/>
  <arg name="y" default="0"/>
  <arg name="z" default="0"/>
  <arg name="roll" default="0.0"/>
  <arg name="pitch" default="0.0"/>
  <arg name="yaw" default="0.0"/>

  <!-- The name of the robot (must be directory in eufs_description/robots called {robot_name} with robot.urdf.xacro and config.yaml) -->
  <arg name="robot_name" default="eufs"/>
  <arg name="config_file" default="$(find eufs_description)/robots/$(arg robot_name)/config.yaml"/>

  <!-- Change the simulate_perception parameter based on the launch group -->
  <group if="$(eval arg('launch_group')=='no_perception')">
    <param name="robot_description"
           command="$(find xacro)/xacro '$(find eufs_description)/robots/$(arg robot_name)/robot.urdf.xacro'
                                                robot_name:='$(arg robot_name)'
                                                vehicle_model:='$(arg vehicleModel)'
                                                config_file:='$(arg config_file)'
                                                publish_tf:=$(arg publish_gt_tf)
                                                simulate_perception:=true"/>  <!-- Should simulate perception if in no_perception launch group -->
  </group>
  <group unless="$(eval arg('launch_group')=='no_perception')">
    <param name="robot_description"
           command="$(find xacro)/xacro '$(find eufs_description)/robots/$(arg robot_name)/robot.urdf.xacro'
                                                robot_name:='$(arg robot_name)'
                                                vehicle_model:='$(arg vehicleModel)'
                                                config_file:='$(arg config_file)'
                                                publish_tf:=$(arg publish_gt_tf)
                                                simulate_perception:=false"/>   <!-- Should NOT simulate perception if NOT in no_perception launch group -->
  </group>

  <!-- Publish the joint states (required for the wheels) -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <remap from="/joint_states" to="/eufs/joint_states" />
    <param name="rate" value="200" />
  </node>

  <!-- Convert joint states to TF transforms for rviz, etc -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
        respawn="false" output="screen">
    <remap from="/joint_states" to="/eufs/joint_states" />
    <param name="rate" value="200" />
  </node>

  <node name="spawn_platform" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model $(arg namespace)
              -gazebo_namespace /gazebo
              -x $(arg x) -y $(arg y) -z $(arg z)
              -R $(arg roll) -P $(arg pitch) -Y $(arg yaw)"/>

  <group if="$(eval arg('rviz'))">
    <!-- Launch RViz -->
    <node name="rviz" pkg="rviz" type="rviz"/>
  </group>

  <group if="$(eval arg('show_rqt_gui'))">
    <!-- Start rqt robot steering and ros can sim module -->
    <node name="eufs_sim_rqt" pkg="rqt_gui" type="rqt_gui" respawn="false" output="screen" args="--perspective-file $(find eufs_gazebo)/config/eufs_sim.perspective"/>
  </group>

</launch>

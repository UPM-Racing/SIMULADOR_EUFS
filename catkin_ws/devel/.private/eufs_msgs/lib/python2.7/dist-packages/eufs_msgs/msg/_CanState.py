# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from eufs_msgs/CanState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CanState(genpy.Message):
  _md5sum = "6932da39aa5099a52c1cabee21cb9e9e"
  _type = "eufs_msgs/CanState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# State of the Autonomous System
uint16 as_state

uint16 AS_OFF = 0
uint16 AS_READY = 1
uint16 AS_DRIVING = 2
uint16 AS_EMERGENCY_BRAKE = 3
uint16 AS_FINISHED = 4

# Mission indicator
uint16 ami_state

uint16 AMI_NOT_SELECTED = 10
uint16 AMI_ACCELERATION = 11
uint16 AMI_SKIDPAD = 12
uint16 AMI_AUTOCROSS = 13
uint16 AMI_TRACK_DRIVE = 14
uint16 AMI_AUTONOMOUS_DEMO = 15
uint16 AMI_ADS_INSPECTION = 16
uint16 AMI_ADS_EBS = 17
uint16 AMI_DDT_INSPECTION_A = 18
uint16 AMI_DDT_INSPECTION_B = 19
uint16 AMI_MANUAL = 20

# asserted true when mission can be started
bool mission_flag
"""
  # Pseudo-constants
  AS_OFF = 0
  AS_READY = 1
  AS_DRIVING = 2
  AS_EMERGENCY_BRAKE = 3
  AS_FINISHED = 4
  AMI_NOT_SELECTED = 10
  AMI_ACCELERATION = 11
  AMI_SKIDPAD = 12
  AMI_AUTOCROSS = 13
  AMI_TRACK_DRIVE = 14
  AMI_AUTONOMOUS_DEMO = 15
  AMI_ADS_INSPECTION = 16
  AMI_ADS_EBS = 17
  AMI_DDT_INSPECTION_A = 18
  AMI_DDT_INSPECTION_B = 19
  AMI_MANUAL = 20

  __slots__ = ['as_state','ami_state','mission_flag']
  _slot_types = ['uint16','uint16','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       as_state,ami_state,mission_flag

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CanState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.as_state is None:
        self.as_state = 0
      if self.ami_state is None:
        self.ami_state = 0
      if self.mission_flag is None:
        self.mission_flag = False
    else:
      self.as_state = 0
      self.ami_state = 0
      self.mission_flag = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2HB().pack(_x.as_state, _x.ami_state, _x.mission_flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.as_state, _x.ami_state, _x.mission_flag,) = _get_struct_2HB().unpack(str[start:end])
      self.mission_flag = bool(self.mission_flag)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2HB().pack(_x.as_state, _x.ami_state, _x.mission_flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.as_state, _x.ami_state, _x.mission_flag,) = _get_struct_2HB().unpack(str[start:end])
      self.mission_flag = bool(self.mission_flag)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2HB = None
def _get_struct_2HB():
    global _struct_2HB
    if _struct_2HB is None:
        _struct_2HB = struct.Struct("<2HB")
    return _struct_2HB

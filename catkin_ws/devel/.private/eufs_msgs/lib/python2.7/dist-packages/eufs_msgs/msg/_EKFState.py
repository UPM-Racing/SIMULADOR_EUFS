# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from eufs_msgs/EKFState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class EKFState(genpy.Message):
  _md5sum = "08d63999f28c68f92f4728fef441c767"
  _type = "eufs_msgs/EKFState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# This message contains information about the state of the EKF
# and is meant for use by the state monitor to ensure the EKF
# isn't failing.

bool gps_received
bool imu_received
bool wheel_odom_received

bool ekf_odom_received
bool ekf_accel_received

bool currently_over_covariance_limit
bool consecutive_turns_over_covariance_limit

bool recommends_failure
"""
  __slots__ = ['gps_received','imu_received','wheel_odom_received','ekf_odom_received','ekf_accel_received','currently_over_covariance_limit','consecutive_turns_over_covariance_limit','recommends_failure']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       gps_received,imu_received,wheel_odom_received,ekf_odom_received,ekf_accel_received,currently_over_covariance_limit,consecutive_turns_over_covariance_limit,recommends_failure

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EKFState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.gps_received is None:
        self.gps_received = False
      if self.imu_received is None:
        self.imu_received = False
      if self.wheel_odom_received is None:
        self.wheel_odom_received = False
      if self.ekf_odom_received is None:
        self.ekf_odom_received = False
      if self.ekf_accel_received is None:
        self.ekf_accel_received = False
      if self.currently_over_covariance_limit is None:
        self.currently_over_covariance_limit = False
      if self.consecutive_turns_over_covariance_limit is None:
        self.consecutive_turns_over_covariance_limit = False
      if self.recommends_failure is None:
        self.recommends_failure = False
    else:
      self.gps_received = False
      self.imu_received = False
      self.wheel_odom_received = False
      self.ekf_odom_received = False
      self.ekf_accel_received = False
      self.currently_over_covariance_limit = False
      self.consecutive_turns_over_covariance_limit = False
      self.recommends_failure = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8B().pack(_x.gps_received, _x.imu_received, _x.wheel_odom_received, _x.ekf_odom_received, _x.ekf_accel_received, _x.currently_over_covariance_limit, _x.consecutive_turns_over_covariance_limit, _x.recommends_failure))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.gps_received, _x.imu_received, _x.wheel_odom_received, _x.ekf_odom_received, _x.ekf_accel_received, _x.currently_over_covariance_limit, _x.consecutive_turns_over_covariance_limit, _x.recommends_failure,) = _get_struct_8B().unpack(str[start:end])
      self.gps_received = bool(self.gps_received)
      self.imu_received = bool(self.imu_received)
      self.wheel_odom_received = bool(self.wheel_odom_received)
      self.ekf_odom_received = bool(self.ekf_odom_received)
      self.ekf_accel_received = bool(self.ekf_accel_received)
      self.currently_over_covariance_limit = bool(self.currently_over_covariance_limit)
      self.consecutive_turns_over_covariance_limit = bool(self.consecutive_turns_over_covariance_limit)
      self.recommends_failure = bool(self.recommends_failure)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8B().pack(_x.gps_received, _x.imu_received, _x.wheel_odom_received, _x.ekf_odom_received, _x.ekf_accel_received, _x.currently_over_covariance_limit, _x.consecutive_turns_over_covariance_limit, _x.recommends_failure))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.gps_received, _x.imu_received, _x.wheel_odom_received, _x.ekf_odom_received, _x.ekf_accel_received, _x.currently_over_covariance_limit, _x.consecutive_turns_over_covariance_limit, _x.recommends_failure,) = _get_struct_8B().unpack(str[start:end])
      self.gps_received = bool(self.gps_received)
      self.imu_received = bool(self.imu_received)
      self.wheel_odom_received = bool(self.wheel_odom_received)
      self.ekf_odom_received = bool(self.ekf_odom_received)
      self.ekf_accel_received = bool(self.ekf_accel_received)
      self.currently_over_covariance_limit = bool(self.currently_over_covariance_limit)
      self.consecutive_turns_over_covariance_limit = bool(self.consecutive_turns_over_covariance_limit)
      self.recommends_failure = bool(self.recommends_failure)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8B = None
def _get_struct_8B():
    global _struct_8B
    if _struct_8B is None:
        _struct_8B = struct.Struct("<8B")
    return _struct_8B

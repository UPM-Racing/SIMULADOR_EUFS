# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from eufs_msgs/Costmap.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Costmap(genpy.Message):
  _md5sum = "ae50f9e6b8b35116ac4e867c7b195b7f"
  _type = "eufs_msgs/Costmap"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# costmap for the MPPI algorithm in the form of a 2D image

# the bounds give the scale and limits of the image
float64 x_bounds_min
float64 x_bounds_max
float64 y_bounds_min
float64 y_bounds_max

# he pixels per meter are used in scaling the image up
float64 pixels_per_meter

# the costmap contains 4 channels of floats
float32[] channel0
float32[] channel1
float32[] channel2
float32[] channel3

"""
  __slots__ = ['x_bounds_min','x_bounds_max','y_bounds_min','y_bounds_max','pixels_per_meter','channel0','channel1','channel2','channel3']
  _slot_types = ['float64','float64','float64','float64','float64','float32[]','float32[]','float32[]','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x_bounds_min,x_bounds_max,y_bounds_min,y_bounds_max,pixels_per_meter,channel0,channel1,channel2,channel3

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Costmap, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.x_bounds_min is None:
        self.x_bounds_min = 0.
      if self.x_bounds_max is None:
        self.x_bounds_max = 0.
      if self.y_bounds_min is None:
        self.y_bounds_min = 0.
      if self.y_bounds_max is None:
        self.y_bounds_max = 0.
      if self.pixels_per_meter is None:
        self.pixels_per_meter = 0.
      if self.channel0 is None:
        self.channel0 = []
      if self.channel1 is None:
        self.channel1 = []
      if self.channel2 is None:
        self.channel2 = []
      if self.channel3 is None:
        self.channel3 = []
    else:
      self.x_bounds_min = 0.
      self.x_bounds_max = 0.
      self.y_bounds_min = 0.
      self.y_bounds_max = 0.
      self.pixels_per_meter = 0.
      self.channel0 = []
      self.channel1 = []
      self.channel2 = []
      self.channel3 = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5d().pack(_x.x_bounds_min, _x.x_bounds_max, _x.y_bounds_min, _x.y_bounds_max, _x.pixels_per_meter))
      length = len(self.channel0)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.channel0))
      length = len(self.channel1)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.channel1))
      length = len(self.channel2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.channel2))
      length = len(self.channel3)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.channel3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.x_bounds_min, _x.x_bounds_max, _x.y_bounds_min, _x.y_bounds_max, _x.pixels_per_meter,) = _get_struct_5d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.channel0 = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.channel1 = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.channel2 = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.channel3 = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5d().pack(_x.x_bounds_min, _x.x_bounds_max, _x.y_bounds_min, _x.y_bounds_max, _x.pixels_per_meter))
      length = len(self.channel0)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.channel0.tostring())
      length = len(self.channel1)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.channel1.tostring())
      length = len(self.channel2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.channel2.tostring())
      length = len(self.channel3)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.channel3.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.x_bounds_min, _x.x_bounds_max, _x.y_bounds_min, _x.y_bounds_max, _x.pixels_per_meter,) = _get_struct_5d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.channel0 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.channel1 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.channel2 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.channel3 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5d = None
def _get_struct_5d():
    global _struct_5d
    if _struct_5d is None:
        _struct_5d = struct.Struct("<5d")
    return _struct_5d

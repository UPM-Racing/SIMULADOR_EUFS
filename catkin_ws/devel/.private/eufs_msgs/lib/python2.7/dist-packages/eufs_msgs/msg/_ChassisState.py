# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from eufs_msgs/ChassisState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class ChassisState(genpy.Message):
  _md5sum = "94f504003a2d58582928e8e48a2519db"
  _type = "eufs_msgs/ChassisState"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

bool throttle_relay_enabled
bool autonomous_enabled
bool runstop_motion_enabled

string steering_commander
float64 steering

string throttle_commander
float64 throttle

string front_brake_commander
float64 front_brake

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','throttle_relay_enabled','autonomous_enabled','runstop_motion_enabled','steering_commander','steering','throttle_commander','throttle','front_brake_commander','front_brake']
  _slot_types = ['std_msgs/Header','bool','bool','bool','string','float64','string','float64','string','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,throttle_relay_enabled,autonomous_enabled,runstop_motion_enabled,steering_commander,steering,throttle_commander,throttle,front_brake_commander,front_brake

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ChassisState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.throttle_relay_enabled is None:
        self.throttle_relay_enabled = False
      if self.autonomous_enabled is None:
        self.autonomous_enabled = False
      if self.runstop_motion_enabled is None:
        self.runstop_motion_enabled = False
      if self.steering_commander is None:
        self.steering_commander = ''
      if self.steering is None:
        self.steering = 0.
      if self.throttle_commander is None:
        self.throttle_commander = ''
      if self.throttle is None:
        self.throttle = 0.
      if self.front_brake_commander is None:
        self.front_brake_commander = ''
      if self.front_brake is None:
        self.front_brake = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.throttle_relay_enabled = False
      self.autonomous_enabled = False
      self.runstop_motion_enabled = False
      self.steering_commander = ''
      self.steering = 0.
      self.throttle_commander = ''
      self.throttle = 0.
      self.front_brake_commander = ''
      self.front_brake = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3B().pack(_x.throttle_relay_enabled, _x.autonomous_enabled, _x.runstop_motion_enabled))
      _x = self.steering_commander
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.steering
      buff.write(_get_struct_d().pack(_x))
      _x = self.throttle_commander
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.throttle
      buff.write(_get_struct_d().pack(_x))
      _x = self.front_brake_commander
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.front_brake
      buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.throttle_relay_enabled, _x.autonomous_enabled, _x.runstop_motion_enabled,) = _get_struct_3B().unpack(str[start:end])
      self.throttle_relay_enabled = bool(self.throttle_relay_enabled)
      self.autonomous_enabled = bool(self.autonomous_enabled)
      self.runstop_motion_enabled = bool(self.runstop_motion_enabled)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.steering_commander = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.steering_commander = str[start:end]
      start = end
      end += 8
      (self.steering,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.throttle_commander = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.throttle_commander = str[start:end]
      start = end
      end += 8
      (self.throttle,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.front_brake_commander = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.front_brake_commander = str[start:end]
      start = end
      end += 8
      (self.front_brake,) = _get_struct_d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3B().pack(_x.throttle_relay_enabled, _x.autonomous_enabled, _x.runstop_motion_enabled))
      _x = self.steering_commander
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.steering
      buff.write(_get_struct_d().pack(_x))
      _x = self.throttle_commander
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.throttle
      buff.write(_get_struct_d().pack(_x))
      _x = self.front_brake_commander
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.front_brake
      buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.throttle_relay_enabled, _x.autonomous_enabled, _x.runstop_motion_enabled,) = _get_struct_3B().unpack(str[start:end])
      self.throttle_relay_enabled = bool(self.throttle_relay_enabled)
      self.autonomous_enabled = bool(self.autonomous_enabled)
      self.runstop_motion_enabled = bool(self.runstop_motion_enabled)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.steering_commander = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.steering_commander = str[start:end]
      start = end
      end += 8
      (self.steering,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.throttle_commander = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.throttle_commander = str[start:end]
      start = end
      end += 8
      (self.throttle,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.front_brake_commander = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.front_brake_commander = str[start:end]
      start = end
      end += 8
      (self.front_brake,) = _get_struct_d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d

// Generated by gencpp from file eufs_msgs/CanState.msg
// DO NOT EDIT!


#ifndef EUFS_MSGS_MESSAGE_CANSTATE_H
#define EUFS_MSGS_MESSAGE_CANSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace eufs_msgs
{
template <class ContainerAllocator>
struct CanState_
{
  typedef CanState_<ContainerAllocator> Type;

  CanState_()
    : as_state(0)
    , ami_state(0)
    , mission_flag(false)  {
    }
  CanState_(const ContainerAllocator& _alloc)
    : as_state(0)
    , ami_state(0)
    , mission_flag(false)  {
  (void)_alloc;
    }



   typedef uint16_t _as_state_type;
  _as_state_type as_state;

   typedef uint16_t _ami_state_type;
  _ami_state_type ami_state;

   typedef uint8_t _mission_flag_type;
  _mission_flag_type mission_flag;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(AS_OFF)
  #undef AS_OFF
#endif
#if defined(_WIN32) && defined(AS_READY)
  #undef AS_READY
#endif
#if defined(_WIN32) && defined(AS_DRIVING)
  #undef AS_DRIVING
#endif
#if defined(_WIN32) && defined(AS_EMERGENCY_BRAKE)
  #undef AS_EMERGENCY_BRAKE
#endif
#if defined(_WIN32) && defined(AS_FINISHED)
  #undef AS_FINISHED
#endif
#if defined(_WIN32) && defined(AMI_NOT_SELECTED)
  #undef AMI_NOT_SELECTED
#endif
#if defined(_WIN32) && defined(AMI_ACCELERATION)
  #undef AMI_ACCELERATION
#endif
#if defined(_WIN32) && defined(AMI_SKIDPAD)
  #undef AMI_SKIDPAD
#endif
#if defined(_WIN32) && defined(AMI_AUTOCROSS)
  #undef AMI_AUTOCROSS
#endif
#if defined(_WIN32) && defined(AMI_TRACK_DRIVE)
  #undef AMI_TRACK_DRIVE
#endif
#if defined(_WIN32) && defined(AMI_AUTONOMOUS_DEMO)
  #undef AMI_AUTONOMOUS_DEMO
#endif
#if defined(_WIN32) && defined(AMI_ADS_INSPECTION)
  #undef AMI_ADS_INSPECTION
#endif
#if defined(_WIN32) && defined(AMI_ADS_EBS)
  #undef AMI_ADS_EBS
#endif
#if defined(_WIN32) && defined(AMI_DDT_INSPECTION_A)
  #undef AMI_DDT_INSPECTION_A
#endif
#if defined(_WIN32) && defined(AMI_DDT_INSPECTION_B)
  #undef AMI_DDT_INSPECTION_B
#endif
#if defined(_WIN32) && defined(AMI_MANUAL)
  #undef AMI_MANUAL
#endif

  enum {
    AS_OFF = 0u,
    AS_READY = 1u,
    AS_DRIVING = 2u,
    AS_EMERGENCY_BRAKE = 3u,
    AS_FINISHED = 4u,
    AMI_NOT_SELECTED = 10u,
    AMI_ACCELERATION = 11u,
    AMI_SKIDPAD = 12u,
    AMI_AUTOCROSS = 13u,
    AMI_TRACK_DRIVE = 14u,
    AMI_AUTONOMOUS_DEMO = 15u,
    AMI_ADS_INSPECTION = 16u,
    AMI_ADS_EBS = 17u,
    AMI_DDT_INSPECTION_A = 18u,
    AMI_DDT_INSPECTION_B = 19u,
    AMI_MANUAL = 20u,
  };


  typedef boost::shared_ptr< ::eufs_msgs::CanState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::eufs_msgs::CanState_<ContainerAllocator> const> ConstPtr;

}; // struct CanState_

typedef ::eufs_msgs::CanState_<std::allocator<void> > CanState;

typedef boost::shared_ptr< ::eufs_msgs::CanState > CanStatePtr;
typedef boost::shared_ptr< ::eufs_msgs::CanState const> CanStateConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::eufs_msgs::CanState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::eufs_msgs::CanState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::eufs_msgs::CanState_<ContainerAllocator1> & lhs, const ::eufs_msgs::CanState_<ContainerAllocator2> & rhs)
{
  return lhs.as_state == rhs.as_state &&
    lhs.ami_state == rhs.ami_state &&
    lhs.mission_flag == rhs.mission_flag;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::eufs_msgs::CanState_<ContainerAllocator1> & lhs, const ::eufs_msgs::CanState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace eufs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::eufs_msgs::CanState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::eufs_msgs::CanState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::eufs_msgs::CanState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::eufs_msgs::CanState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::eufs_msgs::CanState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::eufs_msgs::CanState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::eufs_msgs::CanState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6932da39aa5099a52c1cabee21cb9e9e";
  }

  static const char* value(const ::eufs_msgs::CanState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6932da39aa5099a5ULL;
  static const uint64_t static_value2 = 0x2c1cabee21cb9e9eULL;
};

template<class ContainerAllocator>
struct DataType< ::eufs_msgs::CanState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eufs_msgs/CanState";
  }

  static const char* value(const ::eufs_msgs::CanState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::eufs_msgs::CanState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# State of the Autonomous System\n"
"uint16 as_state\n"
"\n"
"uint16 AS_OFF = 0\n"
"uint16 AS_READY = 1\n"
"uint16 AS_DRIVING = 2\n"
"uint16 AS_EMERGENCY_BRAKE = 3\n"
"uint16 AS_FINISHED = 4\n"
"\n"
"# Mission indicator\n"
"uint16 ami_state\n"
"\n"
"uint16 AMI_NOT_SELECTED = 10\n"
"uint16 AMI_ACCELERATION = 11\n"
"uint16 AMI_SKIDPAD = 12\n"
"uint16 AMI_AUTOCROSS = 13\n"
"uint16 AMI_TRACK_DRIVE = 14\n"
"uint16 AMI_AUTONOMOUS_DEMO = 15\n"
"uint16 AMI_ADS_INSPECTION = 16\n"
"uint16 AMI_ADS_EBS = 17\n"
"uint16 AMI_DDT_INSPECTION_A = 18\n"
"uint16 AMI_DDT_INSPECTION_B = 19\n"
"uint16 AMI_MANUAL = 20\n"
"\n"
"# asserted true when mission can be started\n"
"bool mission_flag\n"
;
  }

  static const char* value(const ::eufs_msgs::CanState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::eufs_msgs::CanState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.as_state);
      stream.next(m.ami_state);
      stream.next(m.mission_flag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CanState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::eufs_msgs::CanState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::eufs_msgs::CanState_<ContainerAllocator>& v)
  {
    s << indent << "as_state: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.as_state);
    s << indent << "ami_state: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ami_state);
    s << indent << "mission_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mission_flag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EUFS_MSGS_MESSAGE_CANSTATE_H

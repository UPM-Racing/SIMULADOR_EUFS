// Generated by gencpp from file eufs_msgs/CarState.msg
// DO NOT EDIT!


#ifndef EUFS_MSGS_MESSAGE_CARSTATE_H
#define EUFS_MSGS_MESSAGE_CARSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/PoseWithCovariance.h>
#include <geometry_msgs/TwistWithCovariance.h>
#include <geometry_msgs/Vector3.h>

namespace eufs_msgs
{
template <class ContainerAllocator>
struct CarState_
{
  typedef CarState_<ContainerAllocator> Type;

  CarState_()
    : header()
    , child_frame_id()
    , pose()
    , twist()
    , linear_acceleration()
    , linear_acceleration_covariance()
    , slip_angle(0.0)
    , state_of_charge(0.0)  {
      linear_acceleration_covariance.assign(0.0);
  }
  CarState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , child_frame_id(_alloc)
    , pose(_alloc)
    , twist(_alloc)
    , linear_acceleration(_alloc)
    , linear_acceleration_covariance()
    , slip_angle(0.0)
    , state_of_charge(0.0)  {
  (void)_alloc;
      linear_acceleration_covariance.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _child_frame_id_type;
  _child_frame_id_type child_frame_id;

   typedef  ::geometry_msgs::PoseWithCovariance_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::geometry_msgs::TwistWithCovariance_<ContainerAllocator>  _twist_type;
  _twist_type twist;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _linear_acceleration_type;
  _linear_acceleration_type linear_acceleration;

   typedef boost::array<double, 9>  _linear_acceleration_covariance_type;
  _linear_acceleration_covariance_type linear_acceleration_covariance;

   typedef double _slip_angle_type;
  _slip_angle_type slip_angle;

   typedef double _state_of_charge_type;
  _state_of_charge_type state_of_charge;





  typedef boost::shared_ptr< ::eufs_msgs::CarState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::eufs_msgs::CarState_<ContainerAllocator> const> ConstPtr;

}; // struct CarState_

typedef ::eufs_msgs::CarState_<std::allocator<void> > CarState;

typedef boost::shared_ptr< ::eufs_msgs::CarState > CarStatePtr;
typedef boost::shared_ptr< ::eufs_msgs::CarState const> CarStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::eufs_msgs::CarState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::eufs_msgs::CarState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::eufs_msgs::CarState_<ContainerAllocator1> & lhs, const ::eufs_msgs::CarState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.child_frame_id == rhs.child_frame_id &&
    lhs.pose == rhs.pose &&
    lhs.twist == rhs.twist &&
    lhs.linear_acceleration == rhs.linear_acceleration &&
    lhs.linear_acceleration_covariance == rhs.linear_acceleration_covariance &&
    lhs.slip_angle == rhs.slip_angle &&
    lhs.state_of_charge == rhs.state_of_charge;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::eufs_msgs::CarState_<ContainerAllocator1> & lhs, const ::eufs_msgs::CarState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace eufs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::eufs_msgs::CarState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::eufs_msgs::CarState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::eufs_msgs::CarState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::eufs_msgs::CarState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::eufs_msgs::CarState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::eufs_msgs::CarState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::eufs_msgs::CarState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c0a0329e69455f31d0a4a61e5a702081";
  }

  static const char* value(const ::eufs_msgs::CarState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc0a0329e69455f31ULL;
  static const uint64_t static_value2 = 0xd0a4a61e5a702081ULL;
};

template<class ContainerAllocator>
struct DataType< ::eufs_msgs::CarState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eufs_msgs/CarState";
  }

  static const char* value(const ::eufs_msgs::CarState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::eufs_msgs::CarState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message includes both the kinematic and the dynamic state of the vehicle\n"
"# All values are in SI units \n"
"Header header\n"
"string child_frame_id # aka frame of the car\n"
"\n"
"# Kinematic State (x_k) in header frame \n"
"geometry_msgs/PoseWithCovariance pose \n"
"\n"
"# Dynamic State (x_d) in child_frame_id\n"
"geometry_msgs/TwistWithCovariance twist   # m/s\n"
"geometry_msgs/Vector3 linear_acceleration # m/s^2\n"
"float64[9] linear_acceleration_covariance # Row major x, y z in (m/s^2)\n"
"float64 slip_angle\n"
"\n"
"# Metadata\n"
"float64 state_of_charge # in Volts (V)\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovariance\n"
"# This represents a pose in free space with uncertainty.\n"
"\n"
"Pose pose\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/TwistWithCovariance\n"
"# This expresses velocity in free space with uncertainty.\n"
"\n"
"Twist twist\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::eufs_msgs::CarState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::eufs_msgs::CarState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.child_frame_id);
      stream.next(m.pose);
      stream.next(m.twist);
      stream.next(m.linear_acceleration);
      stream.next(m.linear_acceleration_covariance);
      stream.next(m.slip_angle);
      stream.next(m.state_of_charge);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CarState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::eufs_msgs::CarState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::eufs_msgs::CarState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "child_frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.child_frame_id);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseWithCovariance_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "twist: ";
    s << std::endl;
    Printer< ::geometry_msgs::TwistWithCovariance_<ContainerAllocator> >::stream(s, indent + "  ", v.twist);
    s << indent << "linear_acceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.linear_acceleration);
    s << indent << "linear_acceleration_covariance[]" << std::endl;
    for (size_t i = 0; i < v.linear_acceleration_covariance.size(); ++i)
    {
      s << indent << "  linear_acceleration_covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.linear_acceleration_covariance[i]);
    }
    s << indent << "slip_angle: ";
    Printer<double>::stream(s, indent + "  ", v.slip_angle);
    s << indent << "state_of_charge: ";
    Printer<double>::stream(s, indent + "  ", v.state_of_charge);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EUFS_MSGS_MESSAGE_CARSTATE_H

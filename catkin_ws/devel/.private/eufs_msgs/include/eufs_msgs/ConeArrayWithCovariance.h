// Generated by gencpp from file eufs_msgs/ConeArrayWithCovariance.msg
// DO NOT EDIT!


#ifndef EUFS_MSGS_MESSAGE_CONEARRAYWITHCOVARIANCE_H
#define EUFS_MSGS_MESSAGE_CONEARRAYWITHCOVARIANCE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <eufs_msgs/ConeWithCovariance.h>
#include <eufs_msgs/ConeWithCovariance.h>
#include <eufs_msgs/ConeWithCovariance.h>
#include <eufs_msgs/ConeWithCovariance.h>
#include <eufs_msgs/ConeWithCovariance.h>

namespace eufs_msgs
{
template <class ContainerAllocator>
struct ConeArrayWithCovariance_
{
  typedef ConeArrayWithCovariance_<ContainerAllocator> Type;

  ConeArrayWithCovariance_()
    : header()
    , blue_cones()
    , yellow_cones()
    , orange_cones()
    , big_orange_cones()
    , unknown_color_cones()  {
    }
  ConeArrayWithCovariance_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , blue_cones(_alloc)
    , yellow_cones(_alloc)
    , orange_cones(_alloc)
    , big_orange_cones(_alloc)
    , unknown_color_cones(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::eufs_msgs::ConeWithCovariance_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::eufs_msgs::ConeWithCovariance_<ContainerAllocator> >::other >  _blue_cones_type;
  _blue_cones_type blue_cones;

   typedef std::vector< ::eufs_msgs::ConeWithCovariance_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::eufs_msgs::ConeWithCovariance_<ContainerAllocator> >::other >  _yellow_cones_type;
  _yellow_cones_type yellow_cones;

   typedef std::vector< ::eufs_msgs::ConeWithCovariance_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::eufs_msgs::ConeWithCovariance_<ContainerAllocator> >::other >  _orange_cones_type;
  _orange_cones_type orange_cones;

   typedef std::vector< ::eufs_msgs::ConeWithCovariance_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::eufs_msgs::ConeWithCovariance_<ContainerAllocator> >::other >  _big_orange_cones_type;
  _big_orange_cones_type big_orange_cones;

   typedef std::vector< ::eufs_msgs::ConeWithCovariance_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::eufs_msgs::ConeWithCovariance_<ContainerAllocator> >::other >  _unknown_color_cones_type;
  _unknown_color_cones_type unknown_color_cones;





  typedef boost::shared_ptr< ::eufs_msgs::ConeArrayWithCovariance_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::eufs_msgs::ConeArrayWithCovariance_<ContainerAllocator> const> ConstPtr;

}; // struct ConeArrayWithCovariance_

typedef ::eufs_msgs::ConeArrayWithCovariance_<std::allocator<void> > ConeArrayWithCovariance;

typedef boost::shared_ptr< ::eufs_msgs::ConeArrayWithCovariance > ConeArrayWithCovariancePtr;
typedef boost::shared_ptr< ::eufs_msgs::ConeArrayWithCovariance const> ConeArrayWithCovarianceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::eufs_msgs::ConeArrayWithCovariance_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::eufs_msgs::ConeArrayWithCovariance_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::eufs_msgs::ConeArrayWithCovariance_<ContainerAllocator1> & lhs, const ::eufs_msgs::ConeArrayWithCovariance_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.blue_cones == rhs.blue_cones &&
    lhs.yellow_cones == rhs.yellow_cones &&
    lhs.orange_cones == rhs.orange_cones &&
    lhs.big_orange_cones == rhs.big_orange_cones &&
    lhs.unknown_color_cones == rhs.unknown_color_cones;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::eufs_msgs::ConeArrayWithCovariance_<ContainerAllocator1> & lhs, const ::eufs_msgs::ConeArrayWithCovariance_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace eufs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::eufs_msgs::ConeArrayWithCovariance_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::eufs_msgs::ConeArrayWithCovariance_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::eufs_msgs::ConeArrayWithCovariance_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::eufs_msgs::ConeArrayWithCovariance_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::eufs_msgs::ConeArrayWithCovariance_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::eufs_msgs::ConeArrayWithCovariance_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::eufs_msgs::ConeArrayWithCovariance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e5f10da6162fc97ab08945c47837cb2d";
  }

  static const char* value(const ::eufs_msgs::ConeArrayWithCovariance_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe5f10da6162fc97aULL;
  static const uint64_t static_value2 = 0xb08945c47837cb2dULL;
};

template<class ContainerAllocator>
struct DataType< ::eufs_msgs::ConeArrayWithCovariance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eufs_msgs/ConeArrayWithCovariance";
  }

  static const char* value(const ::eufs_msgs::ConeArrayWithCovariance_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::eufs_msgs::ConeArrayWithCovariance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Array of 2D cone locations (z = 0) with covariances\n"
"\n"
"Header header\n"
"\n"
"ConeWithCovariance[] blue_cones\n"
"ConeWithCovariance[] yellow_cones\n"
"ConeWithCovariance[] orange_cones\n"
"ConeWithCovariance[] big_orange_cones\n"
"ConeWithCovariance[] unknown_color_cones\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: eufs_msgs/ConeWithCovariance\n"
"# Cone information\n"
"\n"
"geometry_msgs/Point point\n"
"float64[4] covariance\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::eufs_msgs::ConeArrayWithCovariance_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::eufs_msgs::ConeArrayWithCovariance_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.blue_cones);
      stream.next(m.yellow_cones);
      stream.next(m.orange_cones);
      stream.next(m.big_orange_cones);
      stream.next(m.unknown_color_cones);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ConeArrayWithCovariance_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::eufs_msgs::ConeArrayWithCovariance_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::eufs_msgs::ConeArrayWithCovariance_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "blue_cones[]" << std::endl;
    for (size_t i = 0; i < v.blue_cones.size(); ++i)
    {
      s << indent << "  blue_cones[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::eufs_msgs::ConeWithCovariance_<ContainerAllocator> >::stream(s, indent + "    ", v.blue_cones[i]);
    }
    s << indent << "yellow_cones[]" << std::endl;
    for (size_t i = 0; i < v.yellow_cones.size(); ++i)
    {
      s << indent << "  yellow_cones[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::eufs_msgs::ConeWithCovariance_<ContainerAllocator> >::stream(s, indent + "    ", v.yellow_cones[i]);
    }
    s << indent << "orange_cones[]" << std::endl;
    for (size_t i = 0; i < v.orange_cones.size(); ++i)
    {
      s << indent << "  orange_cones[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::eufs_msgs::ConeWithCovariance_<ContainerAllocator> >::stream(s, indent + "    ", v.orange_cones[i]);
    }
    s << indent << "big_orange_cones[]" << std::endl;
    for (size_t i = 0; i < v.big_orange_cones.size(); ++i)
    {
      s << indent << "  big_orange_cones[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::eufs_msgs::ConeWithCovariance_<ContainerAllocator> >::stream(s, indent + "    ", v.big_orange_cones[i]);
    }
    s << indent << "unknown_color_cones[]" << std::endl;
    for (size_t i = 0; i < v.unknown_color_cones.size(); ++i)
    {
      s << indent << "  unknown_color_cones[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::eufs_msgs::ConeWithCovariance_<ContainerAllocator> >::stream(s, indent + "    ", v.unknown_color_cones[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // EUFS_MSGS_MESSAGE_CONEARRAYWITHCOVARIANCE_H

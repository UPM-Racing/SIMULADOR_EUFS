// Generated by gencpp from file eufs_msgs/Costmap.msg
// DO NOT EDIT!


#ifndef EUFS_MSGS_MESSAGE_COSTMAP_H
#define EUFS_MSGS_MESSAGE_COSTMAP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace eufs_msgs
{
template <class ContainerAllocator>
struct Costmap_
{
  typedef Costmap_<ContainerAllocator> Type;

  Costmap_()
    : x_bounds_min(0.0)
    , x_bounds_max(0.0)
    , y_bounds_min(0.0)
    , y_bounds_max(0.0)
    , pixels_per_meter(0.0)
    , channel0()
    , channel1()
    , channel2()
    , channel3()  {
    }
  Costmap_(const ContainerAllocator& _alloc)
    : x_bounds_min(0.0)
    , x_bounds_max(0.0)
    , y_bounds_min(0.0)
    , y_bounds_max(0.0)
    , pixels_per_meter(0.0)
    , channel0(_alloc)
    , channel1(_alloc)
    , channel2(_alloc)
    , channel3(_alloc)  {
  (void)_alloc;
    }



   typedef double _x_bounds_min_type;
  _x_bounds_min_type x_bounds_min;

   typedef double _x_bounds_max_type;
  _x_bounds_max_type x_bounds_max;

   typedef double _y_bounds_min_type;
  _y_bounds_min_type y_bounds_min;

   typedef double _y_bounds_max_type;
  _y_bounds_max_type y_bounds_max;

   typedef double _pixels_per_meter_type;
  _pixels_per_meter_type pixels_per_meter;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _channel0_type;
  _channel0_type channel0;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _channel1_type;
  _channel1_type channel1;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _channel2_type;
  _channel2_type channel2;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _channel3_type;
  _channel3_type channel3;





  typedef boost::shared_ptr< ::eufs_msgs::Costmap_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::eufs_msgs::Costmap_<ContainerAllocator> const> ConstPtr;

}; // struct Costmap_

typedef ::eufs_msgs::Costmap_<std::allocator<void> > Costmap;

typedef boost::shared_ptr< ::eufs_msgs::Costmap > CostmapPtr;
typedef boost::shared_ptr< ::eufs_msgs::Costmap const> CostmapConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::eufs_msgs::Costmap_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::eufs_msgs::Costmap_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::eufs_msgs::Costmap_<ContainerAllocator1> & lhs, const ::eufs_msgs::Costmap_<ContainerAllocator2> & rhs)
{
  return lhs.x_bounds_min == rhs.x_bounds_min &&
    lhs.x_bounds_max == rhs.x_bounds_max &&
    lhs.y_bounds_min == rhs.y_bounds_min &&
    lhs.y_bounds_max == rhs.y_bounds_max &&
    lhs.pixels_per_meter == rhs.pixels_per_meter &&
    lhs.channel0 == rhs.channel0 &&
    lhs.channel1 == rhs.channel1 &&
    lhs.channel2 == rhs.channel2 &&
    lhs.channel3 == rhs.channel3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::eufs_msgs::Costmap_<ContainerAllocator1> & lhs, const ::eufs_msgs::Costmap_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace eufs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::eufs_msgs::Costmap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::eufs_msgs::Costmap_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::eufs_msgs::Costmap_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::eufs_msgs::Costmap_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::eufs_msgs::Costmap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::eufs_msgs::Costmap_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::eufs_msgs::Costmap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ae50f9e6b8b35116ac4e867c7b195b7f";
  }

  static const char* value(const ::eufs_msgs::Costmap_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xae50f9e6b8b35116ULL;
  static const uint64_t static_value2 = 0xac4e867c7b195b7fULL;
};

template<class ContainerAllocator>
struct DataType< ::eufs_msgs::Costmap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eufs_msgs/Costmap";
  }

  static const char* value(const ::eufs_msgs::Costmap_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::eufs_msgs::Costmap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# costmap for the MPPI algorithm in the form of a 2D image\n"
"\n"
"# the bounds give the scale and limits of the image\n"
"float64 x_bounds_min\n"
"float64 x_bounds_max\n"
"float64 y_bounds_min\n"
"float64 y_bounds_max\n"
"\n"
"# he pixels per meter are used in scaling the image up\n"
"float64 pixels_per_meter\n"
"\n"
"# the costmap contains 4 channels of floats\n"
"float32[] channel0\n"
"float32[] channel1\n"
"float32[] channel2\n"
"float32[] channel3\n"
"\n"
;
  }

  static const char* value(const ::eufs_msgs::Costmap_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::eufs_msgs::Costmap_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_bounds_min);
      stream.next(m.x_bounds_max);
      stream.next(m.y_bounds_min);
      stream.next(m.y_bounds_max);
      stream.next(m.pixels_per_meter);
      stream.next(m.channel0);
      stream.next(m.channel1);
      stream.next(m.channel2);
      stream.next(m.channel3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Costmap_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::eufs_msgs::Costmap_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::eufs_msgs::Costmap_<ContainerAllocator>& v)
  {
    s << indent << "x_bounds_min: ";
    Printer<double>::stream(s, indent + "  ", v.x_bounds_min);
    s << indent << "x_bounds_max: ";
    Printer<double>::stream(s, indent + "  ", v.x_bounds_max);
    s << indent << "y_bounds_min: ";
    Printer<double>::stream(s, indent + "  ", v.y_bounds_min);
    s << indent << "y_bounds_max: ";
    Printer<double>::stream(s, indent + "  ", v.y_bounds_max);
    s << indent << "pixels_per_meter: ";
    Printer<double>::stream(s, indent + "  ", v.pixels_per_meter);
    s << indent << "channel0[]" << std::endl;
    for (size_t i = 0; i < v.channel0.size(); ++i)
    {
      s << indent << "  channel0[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.channel0[i]);
    }
    s << indent << "channel1[]" << std::endl;
    for (size_t i = 0; i < v.channel1.size(); ++i)
    {
      s << indent << "  channel1[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.channel1[i]);
    }
    s << indent << "channel2[]" << std::endl;
    for (size_t i = 0; i < v.channel2.size(); ++i)
    {
      s << indent << "  channel2[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.channel2[i]);
    }
    s << indent << "channel3[]" << std::endl;
    for (size_t i = 0; i < v.channel3.size(); ++i)
    {
      s << indent << "  channel3[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.channel3[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // EUFS_MSGS_MESSAGE_COSTMAP_H

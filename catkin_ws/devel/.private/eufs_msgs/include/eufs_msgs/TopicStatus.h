// Generated by gencpp from file eufs_msgs/TopicStatus.msg
// DO NOT EDIT!


#ifndef EUFS_MSGS_MESSAGE_TOPICSTATUS_H
#define EUFS_MSGS_MESSAGE_TOPICSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace eufs_msgs
{
template <class ContainerAllocator>
struct TopicStatus_
{
  typedef TopicStatus_<ContainerAllocator> Type;

  TopicStatus_()
    : topic()
    , description()
    , group()
    , trigger_ebs(false)
    , log_level()
    , status(0)  {
    }
  TopicStatus_(const ContainerAllocator& _alloc)
    : topic(_alloc)
    , description(_alloc)
    , group(_alloc)
    , trigger_ebs(false)
    , log_level(_alloc)
    , status(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _topic_type;
  _topic_type topic;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _description_type;
  _description_type description;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _group_type;
  _group_type group;

   typedef uint8_t _trigger_ebs_type;
  _trigger_ebs_type trigger_ebs;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _log_level_type;
  _log_level_type log_level;

   typedef uint16_t _status_type;
  _status_type status;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(OFF)
  #undef OFF
#endif
#if defined(_WIN32) && defined(PUBLISHING)
  #undef PUBLISHING
#endif
#if defined(_WIN32) && defined(TIMEOUT_EXCEEDED)
  #undef TIMEOUT_EXCEEDED
#endif

  enum {
    OFF = 0u,
    PUBLISHING = 1u,
    TIMEOUT_EXCEEDED = 2u,
  };


  typedef boost::shared_ptr< ::eufs_msgs::TopicStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::eufs_msgs::TopicStatus_<ContainerAllocator> const> ConstPtr;

}; // struct TopicStatus_

typedef ::eufs_msgs::TopicStatus_<std::allocator<void> > TopicStatus;

typedef boost::shared_ptr< ::eufs_msgs::TopicStatus > TopicStatusPtr;
typedef boost::shared_ptr< ::eufs_msgs::TopicStatus const> TopicStatusConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::eufs_msgs::TopicStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::eufs_msgs::TopicStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::eufs_msgs::TopicStatus_<ContainerAllocator1> & lhs, const ::eufs_msgs::TopicStatus_<ContainerAllocator2> & rhs)
{
  return lhs.topic == rhs.topic &&
    lhs.description == rhs.description &&
    lhs.group == rhs.group &&
    lhs.trigger_ebs == rhs.trigger_ebs &&
    lhs.log_level == rhs.log_level &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::eufs_msgs::TopicStatus_<ContainerAllocator1> & lhs, const ::eufs_msgs::TopicStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace eufs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::eufs_msgs::TopicStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::eufs_msgs::TopicStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::eufs_msgs::TopicStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::eufs_msgs::TopicStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::eufs_msgs::TopicStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::eufs_msgs::TopicStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::eufs_msgs::TopicStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "be690e3e74c29c8629a7a49290c3e118";
  }

  static const char* value(const ::eufs_msgs::TopicStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbe690e3e74c29c86ULL;
  static const uint64_t static_value2 = 0x29a7a49290c3e118ULL;
};

template<class ContainerAllocator>
struct DataType< ::eufs_msgs::TopicStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eufs_msgs/TopicStatus";
  }

  static const char* value(const ::eufs_msgs::TopicStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::eufs_msgs::TopicStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Topic information\n"
"string topic\n"
"string description\n"
"string group\n"
"bool trigger_ebs\n"
"string log_level\n"
"\n"
"# Topic status\n"
"uint16 status\n"
"\n"
"uint16 OFF = 0\n"
"uint16 PUBLISHING = 1\n"
"uint16 TIMEOUT_EXCEEDED = 2\n"
;
  }

  static const char* value(const ::eufs_msgs::TopicStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::eufs_msgs::TopicStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.topic);
      stream.next(m.description);
      stream.next(m.group);
      stream.next(m.trigger_ebs);
      stream.next(m.log_level);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TopicStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::eufs_msgs::TopicStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::eufs_msgs::TopicStatus_<ContainerAllocator>& v)
  {
    s << indent << "topic: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.topic);
    s << indent << "description: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.description);
    s << indent << "group: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.group);
    s << indent << "trigger_ebs: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.trigger_ebs);
    s << indent << "log_level: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.log_level);
    s << indent << "status: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EUFS_MSGS_MESSAGE_TOPICSTATUS_H

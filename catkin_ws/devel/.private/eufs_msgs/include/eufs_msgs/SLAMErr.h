// Generated by gencpp from file eufs_msgs/SLAMErr.msg
// DO NOT EDIT!


#ifndef EUFS_MSGS_MESSAGE_SLAMERR_H
#define EUFS_MSGS_MESSAGE_SLAMERR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace eufs_msgs
{
template <class ContainerAllocator>
struct SLAMErr_
{
  typedef SLAMErr_<ContainerAllocator> Type;

  SLAMErr_()
    : header()
    , x_err(0.0)
    , y_err(0.0)
    , z_err(0.0)
    , x_orient_err(0.0)
    , y_orient_err(0.0)
    , z_orient_err(0.0)
    , w_orient_err(0.0)
    , map_similarity(0.0)  {
    }
  SLAMErr_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , x_err(0.0)
    , y_err(0.0)
    , z_err(0.0)
    , x_orient_err(0.0)
    , y_orient_err(0.0)
    , z_orient_err(0.0)
    , w_orient_err(0.0)
    , map_similarity(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _x_err_type;
  _x_err_type x_err;

   typedef double _y_err_type;
  _y_err_type y_err;

   typedef double _z_err_type;
  _z_err_type z_err;

   typedef double _x_orient_err_type;
  _x_orient_err_type x_orient_err;

   typedef double _y_orient_err_type;
  _y_orient_err_type y_orient_err;

   typedef double _z_orient_err_type;
  _z_orient_err_type z_orient_err;

   typedef double _w_orient_err_type;
  _w_orient_err_type w_orient_err;

   typedef double _map_similarity_type;
  _map_similarity_type map_similarity;





  typedef boost::shared_ptr< ::eufs_msgs::SLAMErr_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::eufs_msgs::SLAMErr_<ContainerAllocator> const> ConstPtr;

}; // struct SLAMErr_

typedef ::eufs_msgs::SLAMErr_<std::allocator<void> > SLAMErr;

typedef boost::shared_ptr< ::eufs_msgs::SLAMErr > SLAMErrPtr;
typedef boost::shared_ptr< ::eufs_msgs::SLAMErr const> SLAMErrConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::eufs_msgs::SLAMErr_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::eufs_msgs::SLAMErr_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::eufs_msgs::SLAMErr_<ContainerAllocator1> & lhs, const ::eufs_msgs::SLAMErr_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.x_err == rhs.x_err &&
    lhs.y_err == rhs.y_err &&
    lhs.z_err == rhs.z_err &&
    lhs.x_orient_err == rhs.x_orient_err &&
    lhs.y_orient_err == rhs.y_orient_err &&
    lhs.z_orient_err == rhs.z_orient_err &&
    lhs.w_orient_err == rhs.w_orient_err &&
    lhs.map_similarity == rhs.map_similarity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::eufs_msgs::SLAMErr_<ContainerAllocator1> & lhs, const ::eufs_msgs::SLAMErr_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace eufs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::eufs_msgs::SLAMErr_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::eufs_msgs::SLAMErr_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::eufs_msgs::SLAMErr_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::eufs_msgs::SLAMErr_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::eufs_msgs::SLAMErr_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::eufs_msgs::SLAMErr_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::eufs_msgs::SLAMErr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dc71d228c77971f0462d47d101a48d17";
  }

  static const char* value(const ::eufs_msgs::SLAMErr_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdc71d228c77971f0ULL;
  static const uint64_t static_value2 = 0x462d47d101a48d17ULL;
};

template<class ContainerAllocator>
struct DataType< ::eufs_msgs::SLAMErr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eufs_msgs/SLAMErr";
  }

  static const char* value(const ::eufs_msgs::SLAMErr_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::eufs_msgs::SLAMErr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message for the error of our SLAM algorithm. All of them are based on euclidean distances, besides the map similarity,\n"
"# which can be interpreted as a percentage of how well our algorithm describes the map.\n"
"\n"
"Header header\n"
"\n"
"float64 x_err\n"
"float64 y_err\n"
"float64 z_err\n"
"float64 x_orient_err\n"
"float64 y_orient_err\n"
"float64 z_orient_err\n"
"float64 w_orient_err\n"
"float64 map_similarity\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::eufs_msgs::SLAMErr_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::eufs_msgs::SLAMErr_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.x_err);
      stream.next(m.y_err);
      stream.next(m.z_err);
      stream.next(m.x_orient_err);
      stream.next(m.y_orient_err);
      stream.next(m.z_orient_err);
      stream.next(m.w_orient_err);
      stream.next(m.map_similarity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SLAMErr_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::eufs_msgs::SLAMErr_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::eufs_msgs::SLAMErr_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "x_err: ";
    Printer<double>::stream(s, indent + "  ", v.x_err);
    s << indent << "y_err: ";
    Printer<double>::stream(s, indent + "  ", v.y_err);
    s << indent << "z_err: ";
    Printer<double>::stream(s, indent + "  ", v.z_err);
    s << indent << "x_orient_err: ";
    Printer<double>::stream(s, indent + "  ", v.x_orient_err);
    s << indent << "y_orient_err: ";
    Printer<double>::stream(s, indent + "  ", v.y_orient_err);
    s << indent << "z_orient_err: ";
    Printer<double>::stream(s, indent + "  ", v.z_orient_err);
    s << indent << "w_orient_err: ";
    Printer<double>::stream(s, indent + "  ", v.w_orient_err);
    s << indent << "map_similarity: ";
    Printer<double>::stream(s, indent + "  ", v.map_similarity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EUFS_MSGS_MESSAGE_SLAMERR_H

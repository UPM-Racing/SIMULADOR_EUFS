// Generated by gencpp from file eufs_msgs/LapStats.msg
// DO NOT EDIT!


#ifndef EUFS_MSGS_MESSAGE_LAPSTATS_H
#define EUFS_MSGS_MESSAGE_LAPSTATS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace eufs_msgs
{
template <class ContainerAllocator>
struct LapStats_
{
  typedef LapStats_<ContainerAllocator> Type;

  LapStats_()
    : header()
    , lap_number(0)
    , lap_time(0.0)
    , avg_speed(0.0)
    , max_speed(0.0)
    , max_slip(0.0)
    , max_lateral_accel(0.0)  {
    }
  LapStats_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , lap_number(0)
    , lap_time(0.0)
    , avg_speed(0.0)
    , max_speed(0.0)
    , max_slip(0.0)
    , max_lateral_accel(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int64_t _lap_number_type;
  _lap_number_type lap_number;

   typedef double _lap_time_type;
  _lap_time_type lap_time;

   typedef double _avg_speed_type;
  _avg_speed_type avg_speed;

   typedef double _max_speed_type;
  _max_speed_type max_speed;

   typedef double _max_slip_type;
  _max_slip_type max_slip;

   typedef double _max_lateral_accel_type;
  _max_lateral_accel_type max_lateral_accel;





  typedef boost::shared_ptr< ::eufs_msgs::LapStats_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::eufs_msgs::LapStats_<ContainerAllocator> const> ConstPtr;

}; // struct LapStats_

typedef ::eufs_msgs::LapStats_<std::allocator<void> > LapStats;

typedef boost::shared_ptr< ::eufs_msgs::LapStats > LapStatsPtr;
typedef boost::shared_ptr< ::eufs_msgs::LapStats const> LapStatsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::eufs_msgs::LapStats_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::eufs_msgs::LapStats_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::eufs_msgs::LapStats_<ContainerAllocator1> & lhs, const ::eufs_msgs::LapStats_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.lap_number == rhs.lap_number &&
    lhs.lap_time == rhs.lap_time &&
    lhs.avg_speed == rhs.avg_speed &&
    lhs.max_speed == rhs.max_speed &&
    lhs.max_slip == rhs.max_slip &&
    lhs.max_lateral_accel == rhs.max_lateral_accel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::eufs_msgs::LapStats_<ContainerAllocator1> & lhs, const ::eufs_msgs::LapStats_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace eufs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::eufs_msgs::LapStats_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::eufs_msgs::LapStats_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::eufs_msgs::LapStats_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::eufs_msgs::LapStats_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::eufs_msgs::LapStats_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::eufs_msgs::LapStats_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::eufs_msgs::LapStats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9f369797be29dfdde2a9c9d2a24f1d1a";
  }

  static const char* value(const ::eufs_msgs::LapStats_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9f369797be29dfddULL;
  static const uint64_t static_value2 = 0xe2a9c9d2a24f1d1aULL;
};

template<class ContainerAllocator>
struct DataType< ::eufs_msgs::LapStats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eufs_msgs/LapStats";
  }

  static const char* value(const ::eufs_msgs::LapStats_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::eufs_msgs::LapStats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"int64 lap_number\n"
"float64 lap_time\n"
"float64 avg_speed\n"
"float64 max_speed\n"
"float64 max_slip\n"
"float64 max_lateral_accel\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::eufs_msgs::LapStats_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::eufs_msgs::LapStats_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.lap_number);
      stream.next(m.lap_time);
      stream.next(m.avg_speed);
      stream.next(m.max_speed);
      stream.next(m.max_slip);
      stream.next(m.max_lateral_accel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LapStats_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::eufs_msgs::LapStats_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::eufs_msgs::LapStats_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "lap_number: ";
    Printer<int64_t>::stream(s, indent + "  ", v.lap_number);
    s << indent << "lap_time: ";
    Printer<double>::stream(s, indent + "  ", v.lap_time);
    s << indent << "avg_speed: ";
    Printer<double>::stream(s, indent + "  ", v.avg_speed);
    s << indent << "max_speed: ";
    Printer<double>::stream(s, indent + "  ", v.max_speed);
    s << indent << "max_slip: ";
    Printer<double>::stream(s, indent + "  ", v.max_slip);
    s << indent << "max_lateral_accel: ";
    Printer<double>::stream(s, indent + "  ", v.max_lateral_accel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EUFS_MSGS_MESSAGE_LAPSTATS_H

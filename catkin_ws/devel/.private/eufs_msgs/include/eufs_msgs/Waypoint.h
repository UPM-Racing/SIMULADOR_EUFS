// Generated by gencpp from file eufs_msgs/Waypoint.msg
// DO NOT EDIT!


#ifndef EUFS_MSGS_MESSAGE_WAYPOINT_H
#define EUFS_MSGS_MESSAGE_WAYPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace eufs_msgs
{
template <class ContainerAllocator>
struct Waypoint_
{
  typedef Waypoint_<ContainerAllocator> Type;

  Waypoint_()
    : position()
    , speed(0.0)
    , suggested_steering(0.0)  {
    }
  Waypoint_(const ContainerAllocator& _alloc)
    : position(_alloc)
    , speed(0.0)
    , suggested_steering(0.0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef double _speed_type;
  _speed_type speed;

   typedef double _suggested_steering_type;
  _suggested_steering_type suggested_steering;





  typedef boost::shared_ptr< ::eufs_msgs::Waypoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::eufs_msgs::Waypoint_<ContainerAllocator> const> ConstPtr;

}; // struct Waypoint_

typedef ::eufs_msgs::Waypoint_<std::allocator<void> > Waypoint;

typedef boost::shared_ptr< ::eufs_msgs::Waypoint > WaypointPtr;
typedef boost::shared_ptr< ::eufs_msgs::Waypoint const> WaypointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::eufs_msgs::Waypoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::eufs_msgs::Waypoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::eufs_msgs::Waypoint_<ContainerAllocator1> & lhs, const ::eufs_msgs::Waypoint_<ContainerAllocator2> & rhs)
{
  return lhs.position == rhs.position &&
    lhs.speed == rhs.speed &&
    lhs.suggested_steering == rhs.suggested_steering;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::eufs_msgs::Waypoint_<ContainerAllocator1> & lhs, const ::eufs_msgs::Waypoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace eufs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::eufs_msgs::Waypoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::eufs_msgs::Waypoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::eufs_msgs::Waypoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::eufs_msgs::Waypoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::eufs_msgs::Waypoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::eufs_msgs::Waypoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::eufs_msgs::Waypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b676a37b14a640e08175196f0fdd0067";
  }

  static const char* value(const ::eufs_msgs::Waypoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb676a37b14a640e0ULL;
  static const uint64_t static_value2 = 0x8175196f0fdd0067ULL;
};

template<class ContainerAllocator>
struct DataType< ::eufs_msgs::Waypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eufs_msgs/Waypoint";
  }

  static const char* value(const ::eufs_msgs::Waypoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::eufs_msgs::Waypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Waypoint position\n"
"geometry_msgs/Point position\n"
"\n"
"# Suggested forward velocity (x direction in car frame)\n"
"float64 speed # m/s\n"
"\n"
"# Suggested steering angle\n"
"float64 suggested_steering # rad\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::eufs_msgs::Waypoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::eufs_msgs::Waypoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.speed);
      stream.next(m.suggested_steering);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Waypoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::eufs_msgs::Waypoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::eufs_msgs::Waypoint_<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "suggested_steering: ";
    Printer<double>::stream(s, indent + "  ", v.suggested_steering);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EUFS_MSGS_MESSAGE_WAYPOINT_H

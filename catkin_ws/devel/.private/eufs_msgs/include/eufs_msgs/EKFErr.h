// Generated by gencpp from file eufs_msgs/EKFErr.msg
// DO NOT EDIT!


#ifndef EUFS_MSGS_MESSAGE_EKFERR_H
#define EUFS_MSGS_MESSAGE_EKFERR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace eufs_msgs
{
template <class ContainerAllocator>
struct EKFErr_
{
  typedef EKFErr_<ContainerAllocator> Type;

  EKFErr_()
    : header()
    , gps_x_vel_err(0.0)
    , gps_y_vel_err(0.0)
    , imu_x_acc_err(0.0)
    , imu_y_acc_err(0.0)
    , imu_yaw_err(0.0)
    , ekf_x_vel_var(0.0)
    , ekf_y_vel_var(0.0)
    , ekf_x_acc_var(0.0)
    , ekf_y_acc_var(0.0)
    , ekf_yaw_var(0.0)  {
    }
  EKFErr_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , gps_x_vel_err(0.0)
    , gps_y_vel_err(0.0)
    , imu_x_acc_err(0.0)
    , imu_y_acc_err(0.0)
    , imu_yaw_err(0.0)
    , ekf_x_vel_var(0.0)
    , ekf_y_vel_var(0.0)
    , ekf_x_acc_var(0.0)
    , ekf_y_acc_var(0.0)
    , ekf_yaw_var(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _gps_x_vel_err_type;
  _gps_x_vel_err_type gps_x_vel_err;

   typedef double _gps_y_vel_err_type;
  _gps_y_vel_err_type gps_y_vel_err;

   typedef double _imu_x_acc_err_type;
  _imu_x_acc_err_type imu_x_acc_err;

   typedef double _imu_y_acc_err_type;
  _imu_y_acc_err_type imu_y_acc_err;

   typedef double _imu_yaw_err_type;
  _imu_yaw_err_type imu_yaw_err;

   typedef double _ekf_x_vel_var_type;
  _ekf_x_vel_var_type ekf_x_vel_var;

   typedef double _ekf_y_vel_var_type;
  _ekf_y_vel_var_type ekf_y_vel_var;

   typedef double _ekf_x_acc_var_type;
  _ekf_x_acc_var_type ekf_x_acc_var;

   typedef double _ekf_y_acc_var_type;
  _ekf_y_acc_var_type ekf_y_acc_var;

   typedef double _ekf_yaw_var_type;
  _ekf_yaw_var_type ekf_yaw_var;





  typedef boost::shared_ptr< ::eufs_msgs::EKFErr_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::eufs_msgs::EKFErr_<ContainerAllocator> const> ConstPtr;

}; // struct EKFErr_

typedef ::eufs_msgs::EKFErr_<std::allocator<void> > EKFErr;

typedef boost::shared_ptr< ::eufs_msgs::EKFErr > EKFErrPtr;
typedef boost::shared_ptr< ::eufs_msgs::EKFErr const> EKFErrConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::eufs_msgs::EKFErr_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::eufs_msgs::EKFErr_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::eufs_msgs::EKFErr_<ContainerAllocator1> & lhs, const ::eufs_msgs::EKFErr_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.gps_x_vel_err == rhs.gps_x_vel_err &&
    lhs.gps_y_vel_err == rhs.gps_y_vel_err &&
    lhs.imu_x_acc_err == rhs.imu_x_acc_err &&
    lhs.imu_y_acc_err == rhs.imu_y_acc_err &&
    lhs.imu_yaw_err == rhs.imu_yaw_err &&
    lhs.ekf_x_vel_var == rhs.ekf_x_vel_var &&
    lhs.ekf_y_vel_var == rhs.ekf_y_vel_var &&
    lhs.ekf_x_acc_var == rhs.ekf_x_acc_var &&
    lhs.ekf_y_acc_var == rhs.ekf_y_acc_var &&
    lhs.ekf_yaw_var == rhs.ekf_yaw_var;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::eufs_msgs::EKFErr_<ContainerAllocator1> & lhs, const ::eufs_msgs::EKFErr_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace eufs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::eufs_msgs::EKFErr_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::eufs_msgs::EKFErr_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::eufs_msgs::EKFErr_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::eufs_msgs::EKFErr_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::eufs_msgs::EKFErr_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::eufs_msgs::EKFErr_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::eufs_msgs::EKFErr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "183f1bb90ac72a6c9c108dee51aba1c8";
  }

  static const char* value(const ::eufs_msgs::EKFErr_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x183f1bb90ac72a6cULL;
  static const uint64_t static_value2 = 0x9c108dee51aba1c8ULL;
};

template<class ContainerAllocator>
struct DataType< ::eufs_msgs::EKFErr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eufs_msgs/EKFErr";
  }

  static const char* value(const ::eufs_msgs::EKFErr_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::eufs_msgs::EKFErr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message for the error of the EKF. All of them are based on euclidean distances.\n"
"Header header\n"
"\n"
"float64 gps_x_vel_err\n"
"float64 gps_y_vel_err\n"
"float64 imu_x_acc_err\n"
"float64 imu_y_acc_err\n"
"float64 imu_yaw_err\n"
"float64 ekf_x_vel_var\n"
"float64 ekf_y_vel_var\n"
"float64 ekf_x_acc_var\n"
"float64 ekf_y_acc_var\n"
"float64 ekf_yaw_var\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::eufs_msgs::EKFErr_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::eufs_msgs::EKFErr_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.gps_x_vel_err);
      stream.next(m.gps_y_vel_err);
      stream.next(m.imu_x_acc_err);
      stream.next(m.imu_y_acc_err);
      stream.next(m.imu_yaw_err);
      stream.next(m.ekf_x_vel_var);
      stream.next(m.ekf_y_vel_var);
      stream.next(m.ekf_x_acc_var);
      stream.next(m.ekf_y_acc_var);
      stream.next(m.ekf_yaw_var);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EKFErr_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::eufs_msgs::EKFErr_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::eufs_msgs::EKFErr_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "gps_x_vel_err: ";
    Printer<double>::stream(s, indent + "  ", v.gps_x_vel_err);
    s << indent << "gps_y_vel_err: ";
    Printer<double>::stream(s, indent + "  ", v.gps_y_vel_err);
    s << indent << "imu_x_acc_err: ";
    Printer<double>::stream(s, indent + "  ", v.imu_x_acc_err);
    s << indent << "imu_y_acc_err: ";
    Printer<double>::stream(s, indent + "  ", v.imu_y_acc_err);
    s << indent << "imu_yaw_err: ";
    Printer<double>::stream(s, indent + "  ", v.imu_yaw_err);
    s << indent << "ekf_x_vel_var: ";
    Printer<double>::stream(s, indent + "  ", v.ekf_x_vel_var);
    s << indent << "ekf_y_vel_var: ";
    Printer<double>::stream(s, indent + "  ", v.ekf_y_vel_var);
    s << indent << "ekf_x_acc_var: ";
    Printer<double>::stream(s, indent + "  ", v.ekf_x_acc_var);
    s << indent << "ekf_y_acc_var: ";
    Printer<double>::stream(s, indent + "  ", v.ekf_y_acc_var);
    s << indent << "ekf_yaw_var: ";
    Printer<double>::stream(s, indent + "  ", v.ekf_yaw_var);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EUFS_MSGS_MESSAGE_EKFERR_H
